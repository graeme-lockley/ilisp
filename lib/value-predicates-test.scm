(import "./unit.scm" :as Unit)

(Unit.test "fn?"
    (Unit.assert-falsy (fn? ()))
    (Unit.assert-falsy (fn? 1))
    (Unit.assert-falsy (fn? #\A))
    (Unit.assert-falsy (fn? "name"))
    (Unit.assert-falsy (fn? 'name))
    (Unit.assert-falsy (fn? :name))
    (Unit.assert-falsy (fn? '(1 2 3)))
    (Unit.assert-falsy (fn? []))
    (Unit.assert-falsy (fn? [1 2 3]))
    (Unit.assert-falsy (fn? {}))
    (Unit.assert-falsy (fn? {:a 1 :b 2 :c 3}))
    (Unit.assert-truthy (fn? (proc (n) (+ n 1))))
    (Unit.assert-truthy (fn? car))
    (Unit.assert-falsy (fn? and))
)

(Unit.test "list?"
    (Unit.assert-truthy (list? ()))
    (Unit.assert-falsy (list? 1))
    (Unit.assert-falsy (list? #\A))
    (Unit.assert-falsy (list? "name"))
    (Unit.assert-falsy (list? 'name))
    (Unit.assert-falsy (list? :name))
    (Unit.assert-truthy (list? '(1 2 3)))
    (Unit.assert-falsy (list? []))
    (Unit.assert-falsy (list? [1 2 3]))
    (Unit.assert-falsy (list? {}))
    (Unit.assert-falsy (list? {:a 1 :b 2 :c 3}))
    (Unit.assert-falsy (list? (proc (n) (+ n 1))))
    (Unit.assert-falsy (list? car))
    (Unit.assert-falsy (list? and))
)

(Unit.test "number?"
    (Unit.assert-falsy (number? ()))
    (Unit.assert-truthy (number? 1))
    (Unit.assert-falsy (number? #\A))
    (Unit.assert-falsy (number? "name"))
    (Unit.assert-falsy (number? 'name))
    (Unit.assert-falsy (number? :name))
    (Unit.assert-falsy (number? '(1 2 3)))
    (Unit.assert-falsy (number? []))
    (Unit.assert-falsy (number? [1 2 3]))
    (Unit.assert-falsy (number? {}))
    (Unit.assert-falsy (number? {:a 1 :b 2 :c 3}))
    (Unit.assert-falsy (number? (proc (n) (+ n 1))))
    (Unit.assert-falsy (number? car))
    (Unit.assert-falsy (number? and))
)

(Unit.test "*builtin*.pair?"
    (Unit.assert-falsy (*builtin*.pair? ()))
    (Unit.assert-falsy (*builtin*.pair? 1))
    (Unit.assert-falsy (*builtin*.pair? #\A))
    (Unit.assert-falsy (*builtin*.pair? "name"))
    (Unit.assert-falsy (*builtin*.pair? 'name))
    (Unit.assert-falsy (*builtin*.pair? :name))
    (Unit.assert-truthy (*builtin*.pair? '(1 2 3)))
    (Unit.assert-falsy (*builtin*.pair? []))
    (Unit.assert-falsy (*builtin*.pair? [1 2 3]))
    (Unit.assert-falsy (*builtin*.pair? {}))
    (Unit.assert-falsy (*builtin*.pair? {:a 1 :b 2 :c 3}))
    (Unit.assert-falsy (*builtin*.pair? (proc (n) (+ n 1))))
    (Unit.assert-falsy (*builtin*.pair? car))
    (Unit.assert-falsy (*builtin*.pair? and))
)

(Unit.test "sequential?"
    (Unit.assert-truthy (sequential? ()))
    (Unit.assert-falsy (sequential? 1))
    (Unit.assert-falsy (sequential? #\A))
    (Unit.assert-falsy (sequential? "name"))
    (Unit.assert-falsy (sequential? 'name))
    (Unit.assert-falsy (sequential? :name))
    (Unit.assert-truthy (sequential? '(1 2 3)))
    (Unit.assert-truthy (sequential? []))
    (Unit.assert-truthy (sequential? [1 2 3]))
    (Unit.assert-falsy (sequential? {}))
    (Unit.assert-falsy (sequential? {:a 1 :b 2 :c 3}))
    (Unit.assert-falsy (sequential? (proc (n) (+ n 1))))
    (Unit.assert-falsy (sequential? car))
    (Unit.assert-falsy (sequential? and))
)

(Unit.test "string?"
    (Unit.assert-falsy (string? ()))
    (Unit.assert-falsy (string? 1))
    (Unit.assert-falsy (string? #\A))
    (Unit.assert-truthy (string? "name"))
    (Unit.assert-falsy (string? 'name))
    (Unit.assert-falsy (string? :name))
    (Unit.assert-falsy (string? '(1 2 3)))
    (Unit.assert-falsy (string? []))
    (Unit.assert-falsy (string? [1 2 3]))
    (Unit.assert-falsy (string? {}))
    (Unit.assert-falsy (string? {:a 1 :b 2 :c 3}))
    (Unit.assert-falsy (string? (proc (n) (+ n 1))))
    (Unit.assert-falsy (string? car))
    (Unit.assert-falsy (string? and))
)

(Unit.test "symbol?"
    (Unit.assert-falsy (symbol? ()))
    (Unit.assert-falsy (symbol? 1))
    (Unit.assert-falsy (symbol? #\A))
    (Unit.assert-falsy (symbol? "name"))
    (Unit.assert-truthy (symbol? 'name))
    (Unit.assert-falsy (symbol? :name))
    (Unit.assert-falsy (symbol? '(1 2 3)))
    (Unit.assert-falsy (symbol? []))
    (Unit.assert-falsy (symbol? [1 2 3]))
    (Unit.assert-falsy (symbol? {}))
    (Unit.assert-falsy (symbol? {:a 1 :b 2 :c 3}))
    (Unit.assert-falsy (symbol? (proc (n) (+ n 1))))
    (Unit.assert-falsy (symbol? car))
    (Unit.assert-falsy (symbol? and))
)

(Unit.test "vector?"
    (Unit.assert-falsy (vector? ()))
    (Unit.assert-falsy (vector? 1))
    (Unit.assert-falsy (vector? #\A))
    (Unit.assert-falsy (vector? "name"))
    (Unit.assert-falsy (vector? 'name))
    (Unit.assert-falsy (vector? :name))
    (Unit.assert-falsy (vector? '(1 2 3)))
    (Unit.assert-truthy (vector? []))
    (Unit.assert-truthy (vector? [1 2 3]))
    (Unit.assert-falsy (vector? {}))
    (Unit.assert-falsy (vector? {:a 1 :b 2 :c 3}))
    (Unit.assert-falsy (vector? (proc (n) (+ n 1))))
    (Unit.assert-falsy (vector? car))
    (Unit.assert-falsy (vector? and))
)
