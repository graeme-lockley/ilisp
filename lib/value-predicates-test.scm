(import "./unit.scm" :as Unit)

(Unit.test "string?"
    (Unit.assert-falsy (string? ()))
    (Unit.assert-falsy (string? 1))
    (Unit.assert-truthy (string? "name"))
    (Unit.assert-falsy (string? 'name))
    (Unit.assert-falsy (string? :name))
    (Unit.assert-falsy (string? '(1 2 3)))
    (Unit.assert-falsy (string? []))
    (Unit.assert-falsy (string? [1 2 3]))
    (Unit.assert-falsy (string? {}))
    (Unit.assert-falsy (string? {:a 1 :b 2 :c 3}))
    (Unit.assert-falsy (string? (fn (n) (+ n 1))))
    (Unit.assert-falsy (string? car))
    (Unit.assert-falsy (string? cond))
)

(Unit.test "symbol?"
    (Unit.assert-falsy (symbol? ()))
    (Unit.assert-falsy (symbol? 1))
    (Unit.assert-falsy (symbol? "name"))
    (Unit.assert-truthy (symbol? 'name))
    (Unit.assert-falsy (symbol? :name))
    (Unit.assert-falsy (symbol? '(1 2 3)))
    (Unit.assert-falsy (symbol? []))
    (Unit.assert-falsy (symbol? [1 2 3]))
    (Unit.assert-falsy (symbol? {}))
    (Unit.assert-falsy (symbol? {:a 1 :b 2 :c 3}))
    (Unit.assert-falsy (symbol? (fn (n) (+ n 1))))
    (Unit.assert-falsy (symbol? car))
    (Unit.assert-falsy (symbol? cond))
)
