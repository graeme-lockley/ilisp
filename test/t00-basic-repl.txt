; First things first - "Hello World"
"Hello World"
> "Hello World"

; Numeric - 123
123
> 123

; Symbol using quote - 'a
'a
> a

; Keyword - :a
:a
> :a

; Quoted empty list - '()
'()
> ()

; Empty list - ()
()
> ()

; Quoted list of numbers - '(1 2 3 4 5)
'(1 2 3 4 5)
> (1 2 3 4 5)

; Quoted list of numbers, strings and keywords - '(1 "two" :three 4 "five" :six)
'(1 "two" :three 4 "five" :six)
> (1 "two" :three 4 "five" :six)

; List of numbers, strings and keywords - (1 "two" :three 4 "five" :six)
(1 "two" :three 4 "five" :six)
> (:exception (ValueNotApplicable . {:arguments ("two" :three 4 "five" :six) :value 1}))


; Quoted empty sequence - '[]
'[]
> []

; Empty sequence - []
[]
> []

; Quoted sequence of numbers, strings, keywords and lists - '[1 "two" :three (:a :b :c) 4 "five" :six (:e :f :g)]
'[1 "two" :three (:a :b :c) 4 "five" :six (:e :f :g)]
> [1 "two" :three (:a :b :c) 4 "five" :six (:e :f :g)]

; Sequence of numbers, strings, keywords and lists - [1 "two" :three (:a :b :c) 4 "five" :six (:e :f :g)]
[1 "two" :three (:a :b :c) 4 "five" :six (:e :f :g)]
> [1 "two" :three (:a :b :c) 4 "five" :six (:e :f :g)]


; Quoted empty map = '{}
'{}
> {}

; Empty map - {}
{}
> {}

; Quoted literal map - '{:a 1 "hello" "world" 456 :c if 0}
'{:a 1 "hello" "world" 456 :c if 0}
> {:a 1 "hello" "world" 456 :c if 0}

; Literal map - {:a 1 "hello" "world" 456 :c if 0}
{:a 1 "hello" "world" 456 :c if 0}
> {:a 1 "hello" "world" 456 :c if 0}


; Unexpected EOS - unclosed paren
(
> (:exception (UnexpectedEndOfStream . {expected ")"}))

; Unexpected EOS - unclosed paren
(1
> (:exception (UnexpectedEndOfStream . {expected ")"}))

; Unexpected EOS - unclosed paren
(1 2 3
> (:exception (UnexpectedEndOfStream . {expected ")"}))

; Unexpected EOS - unclosed bracket
[
> (:exception (UnexpectedEndOfStream . {expected "]"}))

; Unexpected EOS - unclosed paren
[1
> (:exception (UnexpectedEndOfStream . {expected "]"}))

; Unexpected EOS - unclosed paren
[1 2 3
> (:exception (UnexpectedEndOfStream . {expected "]"}))

; Unexpected EOS - unclosed curley
{
> (:exception (UnexpectedEndOfStream . {expected "}"}))

; Unexpected EOS - unclosed curley
{:a 1
> (:exception (UnexpectedEndOfStream . {expected "}"}))

; Unexpected EOS - unclosed curley
{:a 1 :b
> (:exception (UnexpectedEndOfStream . {expected "}"}))

; Unexpected EOS - unclosed quote
"
> (:exception (UnexpectedEndOfStream . {expected "\""}))

; Unexpected EOS - unclosed quote
"h
> (:exception (UnexpectedEndOfStream . {expected "\""}))

; Unexpected EOS - unclosed quote
"hello
> (:exception (UnexpectedEndOfStream . {expected "\""}))
