(*builtin*.pair-car)
> (:exception (ExpectedArgumentCount . {:arg-count 1 :arguments () :procedure *builtin*.pair-car}))

(*builtin*.pair-car 1)
> (:exception (InvalidArgument . {:arg-number 0 :expected-type pair :procedure *builtin*.pair-car :received 1}))

(*builtin*.pair-car '(1 2) '(3 4))
> (:exception (ExpectedArgumentCount . {:arg-count 1 :arguments ((1 2) (3 4)) :procedure *builtin*.pair-car}))

(*builtin*.pair-car '())
> (:exception (InvalidArgument . {:arg-number 0 :expected-type pair :procedure *builtin*.pair-car :received ()}))

(*builtin*.pair-car '(1 2 3 4 5))
> 1


(*builtin*.pair-cdr)
> (:exception (ExpectedArgumentCount . {:arg-count 1 :arguments () :procedure *builtin*.pair-cdr}))

(*builtin*.pair-cdr 1)
> (:exception (InvalidArgument . {:arg-number 0 :expected-type pair :procedure *builtin*.pair-cdr :received 1}))

(*builtin*.pair-cdr '(1 2) '(3 4))
> (:exception (ExpectedArgumentCount . {:arg-count 1 :arguments ((1 2) (3 4)) :procedure *builtin*.pair-cdr}))

(*builtin*.pair-cdr '())
> (:exception (InvalidArgument . {:arg-number 0 :expected-type pair :procedure *builtin*.pair-cdr :received ()}))

(*builtin*.pair-cdr '(1 2 3 4 5))
> (2 3 4 5)

(do (*builtin*.map-assoc! (*builtin*.pair-car **root**) 'fred (*builtin*.mutable-map)) fred)
> {}

(*builtin*.map-assoc! fred 'a 1)
> {a 1}

fred
> {a 1}

(*builtin*.map-assoc! fred 'b 2)
> {a 1 b 2}

fred
> {a 1 b 2}

(*builtin*.map-assoc! fred)
> {a 1 b 2}

(*builtin*.map-assoc! fred 'b 3)
> {a 1 b 3}

fred
> {a 1 b 3}

(*builtin*.map-assoc! fred :b 4)
> {a 1 b 3 :b 4}

fred
> {a 1 b 3 :b 4}

(*builtin*.map-assoc! fred a 1)
> (:exception (UnknownSymbol . {name a}))

(*builtin*.map-dissoc! fred)
> {a 1 b 3 :b 4}

(*builtin*.map-dissoc! fred 'a)
> {b 3 :b 4}

fred
> {b 3 :b 4}

(list 1 2 3)
> (1 2 3)

(list? 0)
> #f

(list? "hello")
> #f

(list? 'fred)
> #f

(list? :at)
> #f

(list? [1])
> #f

(list? {:a 1})
> #f

(list? list)
> #f

(list? list?)
> #f

(list? ())
> #t

(list? '(1 2 3))
> #t

(list? '(1 2) '(3 4))
> (:exception (ExpectedArgumentCount . {:arg-count 1 :arguments ((1 2) (3 4)) :procedure list?}))

(pr-str)
> ""

(pr-str 1)
> "1"

(pr-str "hello" 'fred :at [1] {:a 1} '() '(1 (a b c) 3))
> "\"hello\" fred :at [1] {:a 1} () (1 (a b c) 3)"

(str)
> ""

(str 1)
> "1"

(str "hello" 'fred :at [1] {:a 1} '() '(1 (a b c) 3))
> "hellofred:at[1]{:a 1}()(1(abc)3)"

(=)
> #t

(= 1)
> #t

(= 2 2)
> #t

(= 2 1)
> #f

(= 2 (+ 1 1) (- 3 1))
> #t

(= 2 (+ 1 1) (- 4 1))
> #f

(= 2 '())
> #f

(= 2 "hello")
> #f

(= 2 'fred)
> #f

(= 2 :key)
> #f

(= 2 [1 2])
> #f

(= 2 '(1 2))
> #f

(= 2 {:a 1 :b 2})
> #f

(= '() '())
> #t

(= "hello" "world")
> #f

(= "hello" "hello")
> #t

(= "hello" '())
> #f

(= "hello" 'fred)
> #f

(= "hello" :key)
> #f

(= "hello" [1 2])
> #f

(= "hello" '(1 2))
> #f

(= "hello" {:a 1 :b 2})
> #f

(= 'hello 'fred)
> #f

(= 'hello 'hello)
> #t

(= 'hello :key)
> #f

(= 'hello [1 2])
> #f

(= 'hello '(1 2))
> #f

(= 'hello {:a 1 :b 2})
> #f

(= :hello :key)
> #f

(= :hello :hello)
> #t

(= :hello [1 2])
> #f

(= :hello '(1 2))
> #f

(= :hello {:a 1 :b 2})
> #f

(= [1 2] [1 2])
> #t

(= [1 2] [1 2 3])
> #f

(= [] [1 2])
> #f

(= [] [])
> #t

(= [1 2] '(1 2))
> #f

(= [1 2] {:a 1 :b 2})
> #f

(= '(1 2) '(1 2))
> #t

(= '(1 2 3) '(1 2))
> #f

(= '(1 2 3) '())
> #f

(= '(1 2) {:a 1 :b 2})
> #f

(= {:a 1 :b 2} {:a 1 :b 2})
> #t

(= {:b 2 :a 1} {:a 1 :b 2})
> #t

(= {:b 2 :a 1} {:a 1})
> #f

(= {} {})
> #t

(<)
> #t

(< 1)
> #t

(< 1 2)
> #t

(< 1 2 3)
> #t

(< 1 1)
> #f

(< "hello" 1)
> (:exception (InvalidArgument . {:arg-number 0 :expected-type number :procedure integer-less-than :received "hello"}))

(< 1 "hello")
> (:exception (InvalidArgument . {:arg-number 1 :expected-type number :procedure integer-less-than :received "hello"}))

(<=)
> #t

(<= 1)
> #t

(<= 1 2)
> #t

(<= 1 2 3)
> #t

(<= 1 1)
> #t

(<= 1 0)
> #f

(<= "hello" 1)
> (:exception (InvalidArgument . {:arg-number 0 :expected-type number :procedure integer-less-equal :received "hello"}))

(>)
> #t

(> 1)
> #t

(> 2 1)
> #t

(> 3 2 1)
> #t

(> 1 1)
> #f

(> "hello" 1)
> (:exception (InvalidArgument . {:arg-number 0 :expected-type number :procedure integer-greater-than :received "hello"}))

(>=)
> #t

(>= 1)
> #t

(>= 2 1)
> #t

(>= 3 2 1)
> #t

(>= 1 1)
> #t

(>= 0 1)
> #f

(>= "hello" 1)
> (:exception (InvalidArgument . {:arg-number 0 :expected-type number :procedure integer-greater-equal :received "hello"}))

(read-string)
> (:exception (ExpectedArgumentCount . {:arguments () :max-arg-count 2 :min-arg-count 1 :procedure read-string}))

(read-string 1)
> (:exception (InvalidArgument . {:arg-number 0 :expected-type string :procedure read-string :received 1}))

(read-string "1")
> 1

(read-string "(1 2 3)")
> (1 2 3)

(read-string "(1 2 \"hello\")")
> (1 2 "hello")

(*builtin*.eval '1)
> 1

(*builtin*.eval '(+ 1 2))
> 3

(*builtin*.eval (read-string "(*builtin*.pair-cdr '(1 2 3 4 5))"))
> (2 3 4 5)

(do (load-file "./test/basic.sc") (caar '((1 2) (3 4))))
> 1

(do (load-file "./test/basic.sc") (cadr '((1 2) (3 4))))
> (3 4)

(*builtin*.pair 1 ())
> (1)

(*builtin*.pair 1 (*builtin*.pair 2 (*builtin*.pair 3 (*builtin*.pair 4 ()))))
> (1 2 3 4)

(*builtin*.pair 1 '(2 3 4))
> (1 2 3 4)

(concat)
> ()

(concat () () ())
> ()

(concat 1 2 3)
> (:exception (InvalidArgument . {:arg-number 0 :expected-type pair :procedure concat :received 1}))

(concat '(1 2 3) (*builtin*.pair 1 9))
> (:exception (InvalidArgument . {:arg-number 1 :expected-type pair :procedure concat :received (1 . 9)}))

(concat '(1) '(2) '(3))
> (1 2 3)

(concat '(1 2 3) '(4 5 6) '(7 8 9))
> (1 2 3 4 5 6 7 8 9)

(*builtin*.apply)
> (:exception (InvalidArgument . {:arg-number 0 :expected-type pair :procedure apply :received ()}))

(*builtin*.apply 1)
> (:exception (InvalidArgument . {:arg-number 0 :expected-type procedure :procedure apply :received 1}))

(*builtin*.apply +)
> (:exception (InvalidArgument . {:arg-number 1 :expected-type pair :procedure apply :received ()}))

(*builtin*.apply + '(1 2 3))
> 6

(*builtin*.apply + 1 2 '(3 4))
> 10

(*builtin*.apply + 1 2 3)
> (:exception (InvalidArgument . {:arg-number 3 :expected-type pair :procedure apply :received 3}))

(*builtin*.apply + 1 2 3 '())
> 6

(*builtin*.apply + [1 2 3])
> 6

(*builtin*.apply + 1 2 [3 4])
> 10

(*builtin*.apply + 1 2 3 [])
> 6

(*builtin*.apply + 1 2 3 [])
> 6

(map)
> (:exception (ExpectedArgumentCount . {:arg-count 2 :arguments () :procedure map}))

(map (proc (n) (+ n 1)))
> (:exception (ExpectedArgumentCount . {:arg-count 2 :arguments ((#PROCEDURE (n) (+ n 1))) :procedure map}))

(map 1 (proc (n) (+ n 1)))
> (:exception (InvalidArgument . {:arg-number 0 :expected-type (pair vector () string) :procedure map :received 1}))

(map '() (proc (n) (+ n 1)))
> ()

(map '(1 2 3 4) (proc (n) (+ n 1)))
> (2 3 4 5)

(map [] (proc (n) (+ n 1)))
> ()

(map [1 2 3 4] (proc (n) (+ n 1)))
> (2 3 4 5)

(*builtin*.mk-map)
> {}

(*builtin*.map? (*builtin*.mk-map))
> #t

(*builtin*.mk-map :a 1 :b 2 :c 3)
> {:a 1 :b 2 :c 3}

(*builtin*.map? (*builtin*.mk-map :a 1 :b 2 :c 3))
> #t

(*builtin*.mk-map :a 1 :b 2 :c)
> (:exception (InvalidArgument . {:arg-number 5 :expected-type pair :procedure *builtin*.mk-map :received ()}))

(*builtin*.map-assoc {})
> {}

(*builtin*.map-assoc {} :a 1 :b 2 :c 3)
> {:a 1 :b 2 :c 3}

(do (*builtin*.map-assoc! (*builtin*.pair-car **root**) 'a {:a 1 :b 2 :c 3}) (list (*builtin*.map-assoc a :a 2 :b 3) a))
> ({:a 2 :b 3 :c 3} {:a 1 :b 2 :c 3})

(*builtin*.map-dissoc {:a 1 :b 2 :c 3} :a :b)
> {:c 3}

(*builtin*.map-dissoc {:a 1 :b 2 :c 3} :a :b :d)
> {:c 3}

(do (*builtin*.map-assoc! (*builtin*.pair-car **root**) 'a {:a 1 :b 2 :c 3}) (list (*builtin*.map-dissoc a :a :b) a))
> ({:c 3} {:a 1 :b 2 :c 3})

(map-get)
> (:exception (InvalidArgument . {:arg-number 0 :expected-type pair :procedure map-get :received ()}))

(map-get {})
> {}

(map-get [] :a)
> (:exception (InvalidArgument . {:arg-number 0 :expected-type map :procedure map-get :received []}))

(map-get {} :a)
> (:exception (UnknownKeyInMap . {key :a map {}}))

(map-get {:a 1 :b 2 :c 3} :a)
> 1

(map-get {:a 1 :b 2 :c 3} :c)
> 3

(map-get {:a 1 :b 2 :c 3} :d)
> (:exception (UnknownKeyInMap . {key :d map {:a 1 :b 2 :c 3}}))

(map-get {:a 1 :b () :c 3} :b)
> ()

(map-get {:a 1 :b {"a" 1 "b" 2} :c 3} :b "b")
> 2

(map-get {:a 1 :b {"a" 1 "b" 2} :c 3} :a "a")
> (:exception (InvalidArgument . {:arg-number 0 :expected-type map :procedure map-get :received 1}))

(*builtin*.map-contains?)
> (:exception (ExpectedArgumentCount . {:arg-count 2 :arguments () :procedure *builtin*.map-contains?}))

(*builtin*.map-contains? {})
> (:exception (ExpectedArgumentCount . {:arg-count 2 :arguments ({}) :procedure *builtin*.map-contains?}))

(*builtin*.map-contains? [] :a)
> (:exception (InvalidArgument . {:arg-number 0 :expected-type map :procedure *builtin*.map-contains? :received ([] :a)}))

(*builtin*.map-contains? {} :a)
> #f

(*builtin*.map-contains? {:a 1 :b 2 :c 3} :a)
> #t

(*builtin*.map-contains? {:a 1 :b 2 :c 3} :c)
> #t

(*builtin*.map-contains? {:a 1 :b 2 :c 3} :d)
> #f

(*builtin*.map-contains? {:a 1 :b () :c 3} :b)
> #t

((map-get *builtin* 'read-dir) "./test/my_dir_that_does_not_exist")
> (:exception (SystemError . {:code 2 :error "No such file or directory" :parameters "./test/my_dir_that_does_not_exist" :procedure read-dir}))

((map-get *builtin* 'list-count) ((map-get *builtin* 'read-dir) "./test/my_test_dir"))
> 3

((map-get *builtin* 'list-count) (map ((map-get *builtin* 'read-dir) "./test/my_test_dir") (proc (n) (map-get n :name))))
> 3

(do (*builtin*.map-assoc! (*builtin*.pair-car **root**) 'file-name-relative-to-file-name (map-get *builtin* 'file-name-relative-to-file-name)) ())
> ()

(file-name-relative-to-file-name "/home/ilisp/prelude.scm" "/dir/bob.scm")
> "/dir/bob.scm"

(file-name-relative-to-file-name "/home/ilisp/prelude.scm" "./dir/bob.scm")
> "/home/ilisp/dir/bob.scm"

(file-name-relative-to-file-name "/home/ilisp/prelude.scm" "../dir/bob.scm")
> "/home/dir/bob.scm"

(file-name-relative-to-file-name "/home/ilisp/prelude.scm" "./.././dir/bob.scm")
> "/home/dir/bob.scm"

(file-name-relative-to-file-name "/home/ilisp/prelude.scm" "./.././.././dir/bob.scm")
> "/dir/bob.scm"

(file-name-relative-to-file-name "/home/ilisp/prelude.scm" "./.././.././.././dir/bob.scm")
> "/dir/bob.scm"
