(car)
> (:exception (ExpectedArgumentCount . {:arguments () :arg-count 1 :procedure car}))

(car 1)
> (:exception (InvalidArgument . {:received 1 :expected-type "pair" :arg-number 0 :procedure car}))

(car '(1 2) '(3 4))
> (:exception (ExpectedArgumentCount . {:arguments ((1 2) (3 4)) :arg-count 1 :procedure car}))

(car '())
> (:exception (InvalidArgument . {:received () :expected-type "pair" :arg-number 0 :procedure car}))

(car '(1 2 3 4 5))
> 1


(cdr)
> (:exception (ExpectedArgumentCount . {:arguments () :arg-count 1 :procedure cdr}))

(cdr 1)
> (:exception (InvalidArgument . {:received 1 :expected-type "pair" :arg-number 0 :procedure cdr}))

(cdr '(1 2) '(3 4))
> (:exception (ExpectedArgumentCount . {:arguments ((1 2) (3 4)) :arg-count 1 :procedure cdr}))

(cdr '())
> (:exception (InvalidArgument . {:received () :expected-type "pair" :arg-number 0 :procedure cdr}))

(cdr '(1 2 3 4 5))
> (2 3 4 5)


(count)
> (:exception (ExpectedArgumentCount . {:arguments () :arg-count 1 :procedure count}))

(count 1)
> (:exception (InvalidArgument . {:received 1 :expected-type "pair" :arg-number 0 :procedure count}))

(count '(1 2) '(3 4))
> (:exception (ExpectedArgumentCount . {:arguments ((1 2) (3 4)) :arg-count 1 :procedure count}))

(count '())
> 0

(count '(1 2 3 4 5))
> 5

(map-set! (car **root**) 'fred {})
> ()

fred
> {}

(map-set! fred 'a 1)
> ()

fred
> {a 1}

(map-set! fred 'b 2)
> ()

fred
> {b 2 a 1}

(map-set! fred 'b 3)
> 2

fred
> {b 3 a 1}

(map-set! fred :b 4)
> ()

fred
> {:b 4 b 3 a 1}

(map-set! fred a 1)
> (:exception (UnknownSymbol . {name a}))

(list 1 2 3)
> (1 2 3)

(list? 0)
> ()

(list? "hello")
> ()

(list? 'fred)
> ()

(list? :at)
> ()

(list? [1])
> ()

(list? {:a 1})
> ()

(list? list)
> ()

(list? list?)
> ()

(list? ())
> t

(list? '(1 2 3))
> t

(list? '(1 2) '(3 4))
> (:exception (ExpectedArgumentCount . {:arguments ((1 2) (3 4)) :arg-count 1 :procedure list?}))

(pr-str)
> ""

(pr-str 1)
> "1"

(pr-str "hello" 'fred :at [1] {:a 1} '() '(1 (a b c) 3))
> "\"hello\" fred :at [1] {:a 1} () (1 (a b c) 3)"

(str)
> ""

(str 1)
> "1"

(str "hello" 'fred :at [1] {:a 1} '() '(1 (a b c) 3))
> "hellofred:at[1]{:a 1}()(1(abc)3)"

(empty? 1)
> (:exception (InvalidArgument . {:received 1 :expected-type ("pair" "()") :arg-number 0 :procedure empty?}))

(empty? '())
> t

(empty? '(1 2 3))
> ()

(=)
> t

(= 1)
> t

(= 2 2)
> t

(= 2 1)
> ()

(= 2 (+ 1 1) (- 3 1))
> t

(= 2 (+ 1 1) (- 4 1))
> ()

(= 2 '())
> ()

(= 2 "hello")
> ()

(= 2 'fred)
> ()

(= 2 :key)
> ()

(= 2 [1 2])
> ()

(= 2 '(1 2))
> ()

(= 2 {:a 1 :b 2})
> ()

(= '() '())
> t

(= "hello" "world")
> ()

(= "hello" "hello")
> t

(= "hello" '())
> ()

(= "hello" 'fred)
> ()

(= "hello" :key)
> ()

(= "hello" [1 2])
> ()

(= "hello" '(1 2))
> ()

(= "hello" {:a 1 :b 2})
> ()

(= 'hello 'fred)
> ()

(= 'hello 'hello)
> t

(= 'hello :key)
> ()

(= 'hello [1 2])
> ()

(= 'hello '(1 2))
> ()

(= 'hello {:a 1 :b 2})
> ()

(= :hello :key)
> ()

(= :hello :hello)
> t

(= :hello [1 2])
> ()

(= :hello '(1 2))
> ()

(= :hello {:a 1 :b 2})
> ()

(= [1 2] [1 2])
> t

(= [1 2] [1 2 3])
> ()

(= [] [1 2])
> ()

(= [] [])
> t

(= [1 2] '(1 2))
> ()

(= [1 2] {:a 1 :b 2})
> ()

(= '(1 2) '(1 2))
> t

(= '(1 2 3) '(1 2))
> ()

(= '(1 2 3) '())
> ()

(= '(1 2) {:a 1 :b 2})
> ()

(= {:a 1 :b 2} {:a 1 :b 2})
> t

(= {:b 2 :a 1} {:a 1 :b 2})
> t

(= {:b 2 :a 1} {:a 1})
> ()

(= {} {})
> t

(<)
> t

(< 1)
> t

(< 1 2)
> t

(< 1 2 3)
> t

(< 1 1)
> ()

(< "hello" 1)
> (:exception (InvalidArgument . {:received "hello" :expected-type "number" :arg-number 0 :procedure integer-less-than}))

(< 1 "hello")
> (:exception (InvalidArgument . {:received "hello" :expected-type "number" :arg-number 1 :procedure integer-less-than}))

(<=)
> t

(<= 1)
> t

(<= 1 2)
> t

(<= 1 2 3)
> t

(<= 1 1)
> t

(<= 1 0)
> ()

(<= "hello" 1)
> (:exception (InvalidArgument . {:received "hello" :expected-type "number" :arg-number 0 :procedure integer-less-equal}))

(>)
> t

(> 1)
> t

(> 2 1)
> t

(> 3 2 1)
> t

(> 1 1)
> ()

(> "hello" 1)
> (:exception (InvalidArgument . {:received "hello" :expected-type "number" :arg-number 0 :procedure integer-greater-than}))

(>=)
> t

(>= 1)
> t

(>= 2 1)
> t

(>= 3 2 1)
> t

(>= 1 1)
> t

(>= 0 1)
> ()

(>= "hello" 1)
> (:exception (InvalidArgument . {:received "hello" :expected-type "number" :arg-number 0 :procedure integer-greater-equal}))



